name: Deploy Jupyter Book to AWS EC2

on:
  push:
    branches:
      - master
      - docs

jobs:
  deploy-book:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -v -H ${{ vars.EC2_HOST }} >> ~/.ssh/known_hosts || echo "ssh-keyscan failed, continuing..."

    - name: Copy files to EC2
      env:
        EC2_USER: ${{ vars.EC2_USER }}
        EC2_HOST: ${{ vars.EC2_HOST }}
      run: |
        if [ -z "$EC2_USER" ] || [ -z "$EC2_HOST" ]; then
          echo "Error: EC2_USER or EC2_HOST is empty"
          exit 1
        fi

        echo "Creating deployment directory..."
        ssh -o StrictHostKeyChecking=no "${EC2_USER}@${EC2_HOST}" "mkdir -p ~/jupyterbook"

        echo "Copying files..."
        scp -o StrictHostKeyChecking=no -r docs Dockerfile docker-compose.yml "${EC2_USER}@${EC2_HOST}:~/jupyterbook/"

    - name: Deploy with Docker Compose
      env:
        EC2_USER: ${{ vars.EC2_USER }}
        EC2_HOST: ${{ vars.EC2_HOST }}
      run: |
        echo "Installing Docker and Docker Compose..."
        ssh -o StrictHostKeyChecking=no "${EC2_USER}@${EC2_HOST}" "
          # Install Docker if not present
          if ! command -v docker &> /dev/null; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker \$USER
          fi

          # Install Docker Compose if not present
          if ! command -v docker compose &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y docker-compose-plugin
          fi

          cd ~/jupyterbook

          # Stop any running containers
          sudo docker compose down || true

          # Build and start containers
          sudo docker compose up --build -d

          # Wait for healthcheck
          echo 'Waiting for service to be healthy...'
          for i in {1..30}; do
            if curl -s http://localhost:8040 > /dev/null; then
              echo '✓ Service is up and running'
              exit 0
            fi
            echo 'Waiting for service to start...'
            sleep 10
          done
          echo '× Service failed to start'
          exit 1
        "

        echo "✓ Deployment completed successfully!"
        echo "Site should be accessible at http://${EC2_HOST}:8040"
        echo "Note: Make sure port 8040 is allowed in your EC2 security group"

    - name: Cleanup SSH key
      run: rm -f ~/.ssh/id_rsa
